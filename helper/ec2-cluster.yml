# Launches EC2 nodes 

# Set up Info:
# - This script has been tested on Mac OSX High Sierra.
# - You need to :
#   - install Ansible. Ref : http://docs.ansible.com/ansible/latest/intro_installation.html
#   - you need to set the AWS Access keys info as BASH env vars. Ref: http://docs.ansible.com/ansible/latest/guide_aws.html
#  
# How to run this Playbook:
# $   ansible-playbook helpers/ec2-cluster.yml --extra-vars \
#    " EC2_REGION=us-west-2  \
#      EC2_TYPE=m4.xlarge  \
#      EC2_AMI=ami-abcd    \
#      EC2_KEY=mykey  \
#      EC2_SUBNET=subnet-xxx  \
#      EC2_SEC_GRP_ID=sg-xxxx \
#      EBS_VOL_SIZE=100  \
#      IAM=awsusername \
#      EC2_INST_NAME_TAG=my-project \
#      EC2_COUNT=2 \ 
#      PROJ_WORKSPACE="./workspace" (optional)

# OUTPUT: The private IP addresses of all the nodes, will be stored in PROJE_WORKSPACE/PRIVATE_IPs_FILENAME 

# TIP: Create a script in your home dir with your values. 
# TIP: The last 3 vars namely project name tag, count of ec2 nodes & the inventory file 
#      are the values that you will change constantly.

---  
- hosts: localhost  
  connection: local  
  gather_facts: no    
  vars:                     # OVERRIDE these vars on the command line
    EC2_REGION: "{{ EC2_REGION|default('us-west-2') }}"
    EC2_TYPE: "{{ EC2_TYPE|default('null') }}"
    EC2_AMI: "{{ EC2_AMI|default('null') }} "  
    EC2_KEY: "{{ EC2_KEY|default('null') }}"  
    EC2_SUBNET: "{{ EC2_SUBNET|default('null') }}"
    EC2_SEC_GRP_ID: "{{ EC2_SEC_GRP_ID|default('null') }}"
    EC2_INST_NAME_TAG: "{{ EC2_INST_NAME_TAG|default('CHANGE-THIS-DEFAULT-PROJ-NAME') }} "
    EBS_VOL_SIZE: "{{ EBS_VOL_SIZE|default('50') }}"
    IAM: "{{ IAM|default('null') }}" 
    EC2_COUNT: "{{ EC2_COUNT|default('1') }}"     
    PROJ_WORKSPACE: "{{lookup('pipe','pwd')}}/{{PROJ_WORK_SPACE|default('workspace')}}/{{EC2_INST_NAME_TAG}}"
    PRIVATE_IPs_FILENAME: "{{PROJ_WORKSPACE}}/ec2_private_ip.txt"  
    INSTANCE_IDS_FILENAME: "{{PROJ_WORKSPACE}}/ec2_inst_ids.txt"  

  tasks:  
    - stat:
        path: "{{PROJ_WORKSPACE}}"
      register: proj_dir
    - fail:
        msg: "{{PROJ_WORKSPACE}} directory already exists!"
      when: proj_dir.stat.isdir is defined
    - name: Creating "{{PROJ_WORKSPACE}} "
      file:
        path: "{{PROJ_WORKSPACE}}"
        state: directory
        mode: 0755
    - name: Launching "{{EC2_COUNT}}" number of ec2 nodes  
      ec2:                              # Using the ec2 Module in Ansible. Ref: http://docs.ansible.com/ansible/latest/ec2_module.html
        region: "{{ EC2_REGION }}"  
        key_name: "{{ EC2_KEY }}"  
        instance_type: "{{ EC2_TYPE }}"    
        image: "{{ EC2_AMI }}"  
        vpc_subnet_id: "{{ EC2_SUBNET }}"
        group_id: "{{ EC2_SEC_GRP_ID }}"
        count: "{{ EC2_COUNT }}"  
        wait: yes   
        assign_public_ip: false
        volumes:
          - device_name: /dev/xvdba # swap
            volume_type: gp2 # HDD default 
            volume_size: 4   # 4 GB default
            delete_on_termination: true
          - device_name: /dev/xvdbb # data volume
            volume_type: gp2  # HDD default 
            volume_size: "{{ EBS_VOL_SIZE }}"
            delete_on_termination: true
        instance_tags:  
          Name: "{{ EC2_INST_NAME_TAG }}"  
          user: "{{ IAM }}"  # additional tag  
          User: "{{ IAM }}"  # required tag 
        user_data: |
          #!/bin/bash -x
          # adding swap to each machine. swap space is not created by default
          mkswap /dev/xvdba
          swapon /dev/xvdba
          echo "/dev/xvdba       none    swap    sw  0       0" >> /etc/fstab
      register: mapr_cluster
    - name: Waiting for the instance to come up. Check VPN is on!
      local_action: wait_for
                    host={{ item.private_ip }}
                    state=started
                    port=22
      with_items: "{{ mapr_cluster.instances }} "
    - name: create empty "{{PRIVATE_IPs_FILENAME}}"  file  
      file: 
        path: "{{PRIVATE_IPs_FILENAME}}"
        state: touch
    - name: add first line in "{{PRIVATE_IPs_FILENAME}}"  file  
      lineinfile: 
        path: "{{PRIVATE_IPs_FILENAME}}"
        state: present
        line: '[private_ip]'
    - name: Adding the Private IP addresses to "{{PRIVATE_IPs_FILENAME}}" file
      local_action: lineinfile 
                    state=present
                    dest="{{PRIVATE_IPs_FILENAME}}" 
                    line={{ item.private_ip }}
      with_items: "{{ mapr_cluster.instances }}"
    - name: create empty "{{INSTANCE_IDS_FILENAME}}"  file  
      file: 
        path: "{{INSTANCE_IDS_FILENAME}}"
        state: touch
    - name: add first line in "{{INSTANCE_IDS_FILENAME}}"  file  
      lineinfile: 
        path: "{{INSTANCE_IDS_FILENAME}}"
        state: present
        line: '[instance_ids]'
    - name: Inventory File "{{INSTANCE_IDS_FILENAME}}" contains the Instance Ids
      local_action: lineinfile
                    state=present
                    dest="{{INSTANCE_IDS_FILENAME}}"
                    line="{{item}}"
      with_items: "{{ mapr_cluster.instance_ids }}"
    - name: add first line in "{{INSTANCE_IDS_FILENAME}}"  file  
      lineinfile: 
        path: "{{INSTANCE_IDS_FILENAME}}"
        state: present
        line: "\n# Terminate instances: $ aws ec2 terminate-instances --instance-ids $(grep -v 'instance_ids' {{INSTANCE_IDS_FILENAME}}|xargs)"

